<?php
/**
 * Created by PhpStorm.
 * User: 仝帅
 * Date: 2016-06-03
 * Time: 12:16
 */

namespace Partner\Model;

use Base\Service\WechatHelper;


class ActivityModel extends BaseModel
{
    public function getlist($pid){
        $typelist = M('activity_type')->order('sort asc')->select();
        for ($i=0;$i<count($typelist);$i++){
            $ac = M('activity')->where(array('partner_id'=>$pid,'type'=>$typelist[$i]['id'],'status'=>0))->select();
            $typelist[$i]['aclist'] = $ac;
        }
        return $typelist;
    }

    public function getOldList($p,$pid)
    {
        $sql = "select a.shop_names,a.name,a.start_time,a.end_time,t.name as type from sm_activity a left join sm_activity_type t on t.id=a.type where a.status=1 and a.partner_id=$pid";
        return $this->getPage($sql,$p);
    }

    public function getById($id)
    {
        return parent::getById('activity', $id); // TODO: Change the autogenerated stub
    }

    /** 添加活动信息，data中需要保存对应类型活动的param
     * @param $data
     * @return bool
     */
    public function addModify($data)
    {
        if(!empty($data['start_time'])){
            $data['start_time'] = strtotime($data['start_time']);
        }else{
            $data['start_time'] = time();
        }
        if(!empty($data['end_time'])){
            $data['end_time'] = strtotime($data['end_time']);
        }
        $can_many = self::getLineKeyById("activity_type",$data['type'],"can_many");
        $shop_ids = explode(',',$data['shop_ids']);
        if(empty($can_many)){
            foreach ($shop_ids as $sid){
                if(!empty($sid)){
                    $num = M("activity_shop")->where(array('shop_id'=>$sid,'type'=>$data['type'],'status'=>0))->count();
                    if($num>0){
                        return false;
                    }
                }
            }
        }

        $id = M('activity')->add($data);
        foreach ($shop_ids as $sid){
            if(!empty($sid)){
                $newdata['partner_id'] = $data['partner_id'];
                $newdata['shop_id'] = $sid;
                $newdata['act_id'] = $id;
                $newdata['type'] = $data['type'];
                if(empty($data['start_time'])){
                    $newdata['start_time'] = time();
                }else{
                    $newdata['start_time'] = $data['start_time'];
                }
                $newdata['end_time'] = $data['end_time'];
                M('activity_shop')->add($newdata);
            }
        }
        return true;
    }

    public function getFunType($name){
        $id = M('activity_type')->where(array('add_method'=>$name))->getField("id");
        return $id;
    }



    public function stopActivity($id)
    {
        M('activity')->where(array('id'=>$id))->save(array('status'=>1,'end_time'=>time()));
        M('activity_shop')->where(array('act_id'=>$id))->save(array('status'=>1,'end_time'=>time()));
    }

    public function isUserRecharge($partner_id){
        $res = M('partner_conf')->where(array('partner_id'=>$partner_id))->getField('is_user_recharge');
        return $res;
    }

    public function setUserRecharge($partner_id,$data){
        M('partner_conf')->where(array('partner_id'=>$partner_id))->save(array('is_user_recharge'=>$data['is_user_recharge']));
        if($data['is_user_recharge'] == 1){
            M('user_recharge_set')->where(array('partner_id'=>$partner_id))->delete();
            foreach($data['money'] as $key=>$value){
                $data1['money'] = $value;
                $data1['giveaway_money'] = $data['giveaway_money'][$key];
                $data1['partner_id'] = $partner_id;
                $data1['bonus_money'] = $data['bonus_money'][$key];
                $data1['bonus_num'] = $data['bonus_num'][$key];
                $data1['bonus_param1'] = $data['bonus_param1'][$key];
                $data1['bonus_param2'] = $data['bonus_param2'][$key];
                M('user_recharge_set')->add($data1);
            }
        }
        
    }

    public function getUserRechargeList($partner_id){
        $res = M('user_recharge_set')->where(array('partner_id'=>$partner_id))->select();
        return $res;
    }

    public function getUserRechargeLog($partner_id,$p,$start_time,$end_time,$recommand_id,$uid){
        if(!empty($start_time) && !empty($end_time)){
            $where .= ' AND ur.create_time>='.strtotime($start_time).' AND ur.create_time<'.(strtotime($end_time)+86400);
        }

        if(!empty($recommand_id)){
            $where .= ' AND ur.qrcode_id='.$recommand_id;
        }

        if(!empty($uid)){
            $where .= ' AND ur.uid='.$uid;
        }

        $sql = "SELECT ur.*,u.nickname,ua.name,urq.name AS recommand_name FROM sm_user_recharge_log ur LEFT JOIN sm_wechat_user u ON ur.uid=u.id  LEFT JOIN sm_user_address ua ON ua.uid=u.id LEFT JOIN sm_user_recharge_qrcode urq ON ur.qrcode_id=urq.id WHERE ur.partner_id=".$partner_id." AND ur.status=1 ".$where." ORDER BY ur.create_time DESC";
        // echo $sql;die;
        return $this->getPage($sql,$p);
    }



    public function rechargeQrcodeSave($data)
    {

        if(empty($data['id'])){
            $data['create_time'] = time();
            $id = M('user_recharge_qrcode')->add($data);
            $partner = M('partner')->where(array('id'=>$data['partner_id']))->getField('name');
            $wechat = WechatHelper::get($data['partner_id']);
            $url = C('BASE_URL').U("Home/Index/userRecharge",array('pid'=>$data['partner_id'],'recommand_id'=>$id,'j'=>1));
            $url = $wechat->getUrl($url);
            $qrcode = self::createImg($url,$partner,$data['name']);
            $res = M('user_recharge_qrcode')->where(array('id'=>$id))->save(array('url'=>$qrcode));
        }else{
            $res = M('user_recharge_qrcode')->where(array('id'=>$data['id']))->save($data);
        }
        return $res;


        /*$shop = M("shop")->where(array('id'=>$id))->field('name,partner_id,shop_pay_img')->find();
        $partner = M('partner')->where(array('id'=>$shop['partner_id']))->getField('name');
        if(empty($shop['shop_pay_img'])){
            $url = C('BASE_URL').U("Home/Index/userRechargePay",array('pid'=>$shop['partner_id'],'sid'=>$id));
            $qrcode = self::createImg($url,$partner,$shop['name']);
            M("shop")->where(array('id'=>$id))->save(array('shop_pay_img'=>$qrcode));
            return $qrcode;
        }
        return $shop['shop_pay_img'];*/
    }

    /** 生成到店支付的二维码图片
     * @param $url
     * @param $partner_name
     * @param $shop_name
     * @return string
     */
    public function createImg($url,$partner_name,$shop_name)
    {
        $q_name = 'recharge_'.time().rand(100,999).".png";
        $qrcode = getQrcode($url,"./Public/shoppay/".$q_name,8);
        $savePath = "/Public/shoppay/$q_name";
        /*$header = "./Public/Back/img/header_recharge.png";
        $f_header = imagecreatefrompng($header);
        $h_info = getimagesize($header);
        $f_qrcode = imagecreatefrompng($qrcode);
        $q_info = getimagesize($qrcode);
        $src = imagecreatetruecolor($h_info[0], $h_info[1]);
        $red = imagecolorallocate($src, 255, 255, 255);
        imagefill($src, 0, 0, $red);
        $qr_x = ceil($h_info[0]-$q_info[0])/2;
        $qr_y = 160;
        imagecopy($src, $f_header, 0, 0, 0, 0, $h_info[0], $h_info[1]);
        imagecopy($src, $f_qrcode, $qr_x, $qr_y, 0, 0, $q_info[0], $q_info[1]);
        $black = imagecolorallocate($src, 0, 0, 0);
        $text = $partner_name;
        $font = "./Public/Back/font/yahei.ttf";
        $font_size = 50;
        $fontBox = imagettfbbox($font_size, 0, $font, $text);//文字水平居中实质

        $font_x = ceil(($h_info[0] - $fontBox[2]) / 2);
        $font_y = $q_info[1]+$qr_y+$font_size;

        imagettftext($src,$font_size,0,$font_x,$font_y,$black,$font,$text);
        imagedestroy($f_qrcode);
        $font_size2 = 15;
        $text = $shop_name;
        $fontBox2 = imagettfbbox($font_size2, 0, $font, $text);//文字水平居中实质
        $font_x = ceil(($h_info[0] - $fontBox2[2]) / 2);
        $font_y += $font_size2*3;
        imagettftext($src,$font_size2,0,$font_x,$font_y,$black,$font,$text);
        $savePath = "/Public/shoppay/$q_name";
        imagepng($src,'.'.$savePath);*/
        return $savePath;
    }

    public function getRechargeQrcodePage($partner_id,$p){
        $sql = "select * from sm_user_recharge_qrcode where partner_id=$partner_id order by id desc";
        return self::getPage($sql,$p);
    }

    public function getRechargeQrcodeById($id){
        $res = M('user_recharge_qrcode')->where(array('id'=>$id))->find();
        return $res;
    }

    public function qrcodeDel($id){
        $url = M('user_recharge_qrcode')->where(array('id'=>$id))->getField('url');
        $res = M('user_recharge_qrcode')->where(array('id'=>$id))->delete();
        if($res){
            unlink(C('BASE_PATH').$url);
        }
        return $res;
    }

    public function addGoodsDiscount($partner_id,$data){
        $res = M('goods_discount')->where(array('partner_id'=>$partner_id))->find();
        if(empty($res)){
            //新增
            $data1['partner_id'] = $partner_id;
            $shop_ids = trim($data['shop_ids'],',');
            $data1['shop_ids'] = $shop_ids;
            $data1['shop_names'] = $data['shop_names'];
            $data1['goods_discount_num'] = $data['goods_discount_num'];
            $data1['share_with_other'] = $data['share'];
            M('goods_discount')->add($data1);
        }else{
            //修改
            $shop_ids = trim($data['shop_ids'],',');
            $data1['shop_ids'] = $shop_ids;
            $data1['shop_names'] = $data['shop_names'];
            $data1['goods_discount_num'] = $data['goods_discount_num'];
            $data1['share_with_other'] = $data['share'];
            M('goods_discount')->where(array('partner_id'=>$partner_id))->save($data1);
        }
    }

    public function getGoodsDiscount($partner_id){
        $res = M('goods_discount')->where(array('partner_id'=>$partner_id))->find();
        return $res;
    }

    public function changeDiscountStatus($partner_id,$now_status){
        if($now_status == 1){
            $status = 0;
        }else{
            $status = 1;
        }
        M('goods_discount')->where(array('partner_id'=>$partner_id))->save(array('status'=>$status));
    }

    public function getUserAccountMoneyList($p,$partner_id){
        $sql = "SELECT ui.uid,ui.account_money,ua.name FROM sm_user_info ui LEFT JOIN sm_user_address ua ON ui.uid=ua.uid WHERE ui.account_money > 0 AND ui.partner_id=".$partner_id." ORDER BY ui.account_money DESC";

        $res = $this->getPage($sql,$p);

        foreach($res['data'] as $key=>$user){
            $sql = "SELECT SUM(money) AS total_recharge_money,SUM(giveaway_money) AS total_giveaway_money,SUM(bonus_money*bonus_num) AS total_bonus_money FROM sm_user_recharge_log WHERE uid=".$user['uid']." AND status=1";
            $recharge_info = M()->query($sql);
            $res['data'][$key]['total_recharge_money'] = $recharge_info[0]['total_recharge_money'];
            $res['data'][$key]['total_giveaway_money'] = $recharge_info[0]['total_giveaway_money'];
            $res['data'][$key]['total_bonus_money'] = $recharge_info[0]['total_bonus_money'];
        }
        return $res;
    }
}